// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: message.proto

package x64

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SigRPCClient is the client API for SigRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SigRPCClient interface {
	LoadLib(ctx context.Context, in *LoadLibMsg, opts ...grpc.CallOption) (*LoadLibMsg, error)
	InvokeFunc(ctx context.Context, opts ...grpc.CallOption) (SigRPC_InvokeFuncClient, error)
	PullPage(ctx context.Context, in *PullPageMsg, opts ...grpc.CallOption) (*PullPageMsg, error)
}

type sigRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewSigRPCClient(cc grpc.ClientConnInterface) SigRPCClient {
	return &sigRPCClient{cc}
}

func (c *sigRPCClient) LoadLib(ctx context.Context, in *LoadLibMsg, opts ...grpc.CallOption) (*LoadLibMsg, error) {
	out := new(LoadLibMsg)
	err := c.cc.Invoke(ctx, "/x64.SigRPC/LoadLib", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sigRPCClient) InvokeFunc(ctx context.Context, opts ...grpc.CallOption) (SigRPC_InvokeFuncClient, error) {
	stream, err := c.cc.NewStream(ctx, &SigRPC_ServiceDesc.Streams[0], "/x64.SigRPC/InvokeFunc", opts...)
	if err != nil {
		return nil, err
	}
	x := &sigRPCInvokeFuncClient{stream}
	return x, nil
}

type SigRPC_InvokeFuncClient interface {
	Send(*InvokeFuncMsg) error
	Recv() (*InvokeFuncMsg, error)
	grpc.ClientStream
}

type sigRPCInvokeFuncClient struct {
	grpc.ClientStream
}

func (x *sigRPCInvokeFuncClient) Send(m *InvokeFuncMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sigRPCInvokeFuncClient) Recv() (*InvokeFuncMsg, error) {
	m := new(InvokeFuncMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sigRPCClient) PullPage(ctx context.Context, in *PullPageMsg, opts ...grpc.CallOption) (*PullPageMsg, error) {
	out := new(PullPageMsg)
	err := c.cc.Invoke(ctx, "/x64.SigRPC/PullPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SigRPCServer is the server API for SigRPC service.
// All implementations must embed UnimplementedSigRPCServer
// for forward compatibility
type SigRPCServer interface {
	LoadLib(context.Context, *LoadLibMsg) (*LoadLibMsg, error)
	InvokeFunc(SigRPC_InvokeFuncServer) error
	PullPage(context.Context, *PullPageMsg) (*PullPageMsg, error)
	mustEmbedUnimplementedSigRPCServer()
}

// UnimplementedSigRPCServer must be embedded to have forward compatible implementations.
type UnimplementedSigRPCServer struct {
}

func (UnimplementedSigRPCServer) LoadLib(context.Context, *LoadLibMsg) (*LoadLibMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadLib not implemented")
}
func (UnimplementedSigRPCServer) InvokeFunc(SigRPC_InvokeFuncServer) error {
	return status.Errorf(codes.Unimplemented, "method InvokeFunc not implemented")
}
func (UnimplementedSigRPCServer) PullPage(context.Context, *PullPageMsg) (*PullPageMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullPage not implemented")
}
func (UnimplementedSigRPCServer) mustEmbedUnimplementedSigRPCServer() {}

// UnsafeSigRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SigRPCServer will
// result in compilation errors.
type UnsafeSigRPCServer interface {
	mustEmbedUnimplementedSigRPCServer()
}

func RegisterSigRPCServer(s grpc.ServiceRegistrar, srv SigRPCServer) {
	s.RegisterService(&SigRPC_ServiceDesc, srv)
}

func _SigRPC_LoadLib_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadLibMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigRPCServer).LoadLib(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/x64.SigRPC/LoadLib",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigRPCServer).LoadLib(ctx, req.(*LoadLibMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigRPC_InvokeFunc_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SigRPCServer).InvokeFunc(&sigRPCInvokeFuncServer{stream})
}

type SigRPC_InvokeFuncServer interface {
	Send(*InvokeFuncMsg) error
	Recv() (*InvokeFuncMsg, error)
	grpc.ServerStream
}

type sigRPCInvokeFuncServer struct {
	grpc.ServerStream
}

func (x *sigRPCInvokeFuncServer) Send(m *InvokeFuncMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sigRPCInvokeFuncServer) Recv() (*InvokeFuncMsg, error) {
	m := new(InvokeFuncMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SigRPC_PullPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullPageMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigRPCServer).PullPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/x64.SigRPC/PullPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigRPCServer).PullPage(ctx, req.(*PullPageMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// SigRPC_ServiceDesc is the grpc.ServiceDesc for SigRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SigRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "x64.SigRPC",
	HandlerType: (*SigRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadLib",
			Handler:    _SigRPC_LoadLib_Handler,
		},
		{
			MethodName: "PullPage",
			Handler:    _SigRPC_PullPage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InvokeFunc",
			Handler:       _SigRPC_InvokeFunc_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}
